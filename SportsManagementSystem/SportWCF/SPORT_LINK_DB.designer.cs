#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SportWCF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SPORT_DB")]
	public partial class SPORT_LINK_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBEST_PLAYER(BEST_PLAYER instance);
    partial void UpdateBEST_PLAYER(BEST_PLAYER instance);
    partial void DeleteBEST_PLAYER(BEST_PLAYER instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertGAME(GAME instance);
    partial void UpdateGAME(GAME instance);
    partial void DeleteGAME(GAME instance);
    partial void InsertGAME_IMAGE(GAME_IMAGE instance);
    partial void UpdateGAME_IMAGE(GAME_IMAGE instance);
    partial void DeleteGAME_IMAGE(GAME_IMAGE instance);
    partial void InsertGAME_STAT(GAME_STAT instance);
    partial void UpdateGAME_STAT(GAME_STAT instance);
    partial void DeleteGAME_STAT(GAME_STAT instance);
    partial void InsertGAME_TICKET(GAME_TICKET instance);
    partial void UpdateGAME_TICKET(GAME_TICKET instance);
    partial void DeleteGAME_TICKET(GAME_TICKET instance);
    partial void InsertLEAGUE(LEAGUE instance);
    partial void UpdateLEAGUE(LEAGUE instance);
    partial void DeleteLEAGUE(LEAGUE instance);
    partial void InsertLEAGUE_IMAGE(LEAGUE_IMAGE instance);
    partial void UpdateLEAGUE_IMAGE(LEAGUE_IMAGE instance);
    partial void DeleteLEAGUE_IMAGE(LEAGUE_IMAGE instance);
    partial void InsertLEAGUES_GAME(LEAGUES_GAME instance);
    partial void UpdateLEAGUES_GAME(LEAGUES_GAME instance);
    partial void DeleteLEAGUES_GAME(LEAGUES_GAME instance);
    partial void InsertLOG(LOG instance);
    partial void UpdateLOG(LOG instance);
    partial void DeleteLOG(LOG instance);
    partial void InsertSPORT(SPORT instance);
    partial void UpdateSPORT(SPORT instance);
    partial void DeleteSPORT(SPORT instance);
    partial void InsertSPORT_LEAGUE(SPORT_LEAGUE instance);
    partial void UpdateSPORT_LEAGUE(SPORT_LEAGUE instance);
    partial void DeleteSPORT_LEAGUE(SPORT_LEAGUE instance);
    partial void InsertTEAMIMAGE(TEAMIMAGE instance);
    partial void UpdateTEAMIMAGE(TEAMIMAGE instance);
    partial void DeleteTEAMIMAGE(TEAMIMAGE instance);
    partial void InsertTEAMPLAYER(TEAMPLAYER instance);
    partial void UpdateTEAMPLAYER(TEAMPLAYER instance);
    partial void DeleteTEAMPLAYER(TEAMPLAYER instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertUSERIMAGE(USERIMAGE instance);
    partial void UpdateUSERIMAGE(USERIMAGE instance);
    partial void DeleteUSERIMAGE(USERIMAGE instance);
    partial void InsertVENUE(VENUE instance);
    partial void UpdateVENUE(VENUE instance);
    partial void DeleteVENUE(VENUE instance);
    #endregion
	    
	    
	    public SPORT_LINK_DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SPORT_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SPORT_LINK_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPORT_LINK_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPORT_LINK_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPORT_LINK_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BEST_PLAYER> BEST_PLAYERs
		{
			get
			{
				return this.GetTable<BEST_PLAYER>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<GAME> GAMEs
		{
			get
			{
				return this.GetTable<GAME>();
			}
		}
		
		public System.Data.Linq.Table<GAME_IMAGE> GAME_IMAGEs
		{
			get
			{
				return this.GetTable<GAME_IMAGE>();
			}
		}
		
		public System.Data.Linq.Table<GAME_STAT> GAME_STATs
		{
			get
			{
				return this.GetTable<GAME_STAT>();
			}
		}
		
		public System.Data.Linq.Table<GAME_TICKET> GAME_TICKETs
		{
			get
			{
				return this.GetTable<GAME_TICKET>();
			}
		}
		
		public System.Data.Linq.Table<LEAGUE> LEAGUEs
		{
			get
			{
				return this.GetTable<LEAGUE>();
			}
		}
		
		public System.Data.Linq.Table<LEAGUE_IMAGE> LEAGUE_IMAGEs
		{
			get
			{
				return this.GetTable<LEAGUE_IMAGE>();
			}
		}
		
		public System.Data.Linq.Table<LEAGUES_GAME> LEAGUES_GAMEs
		{
			get
			{
				return this.GetTable<LEAGUES_GAME>();
			}
		}
		
		public System.Data.Linq.Table<LOG> LOGs
		{
			get
			{
				return this.GetTable<LOG>();
			}
		}
		
		public System.Data.Linq.Table<SPORT> SPORTs
		{
			get
			{
				return this.GetTable<SPORT>();
			}
		}
		
		public System.Data.Linq.Table<SPORT_LEAGUE> SPORT_LEAGUEs
		{
			get
			{
				return this.GetTable<SPORT_LEAGUE>();
			}
		}
		
		public System.Data.Linq.Table<TEAMIMAGE> TEAMIMAGEs
		{
			get
			{
				return this.GetTable<TEAMIMAGE>();
			}
		}
		
		public System.Data.Linq.Table<TEAMPLAYER> TEAMPLAYERs
		{
			get
			{
				return this.GetTable<TEAMPLAYER>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<USERIMAGE> USERIMAGEs
		{
			get
			{
				return this.GetTable<USERIMAGE>();
			}
		}
		
		public System.Data.Linq.Table<VENUE> VENUEs
		{
			get
			{
				return this.GetTable<VENUE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BEST_PLAYER")]
	public partial class BEST_PLAYER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _league_ID;
		
		private string _ScorerName;
		
		private System.Nullable<int> _Goals;
		
		private System.Nullable<decimal> _Average;
		
		private EntityRef<LEAGUE> _LEAGUE;
		
		#region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onleague_IDChanging(int value);
    partial void Onleague_IDChanged();
    partial void OnScorerNameChanging(string value);
    partial void OnScorerNameChanged();
    partial void OnGoalsChanging(System.Nullable<int> value);
    partial void OnGoalsChanged();
    partial void OnAverageChanging(System.Nullable<decimal> value);
    partial void OnAverageChanged();
    #endregion
		
		public BEST_PLAYER()
		{
			this._LEAGUE = default(EntityRef<LEAGUE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_league_ID", DbType="Int NOT NULL")]
		public int league_ID
		{
			get
			{
				return this._league_ID;
			}
			set
			{
				if ((this._league_ID != value))
				{
					if (this._LEAGUE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onleague_IDChanging(value);
					this.SendPropertyChanging();
					this._league_ID = value;
					this.SendPropertyChanged("league_ID");
					this.Onleague_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScorerName", DbType="VarChar(MAX)")]
		public string ScorerName
		{
			get
			{
				return this._ScorerName;
			}
			set
			{
				if ((this._ScorerName != value))
				{
					this.OnScorerNameChanging(value);
					this.SendPropertyChanging();
					this._ScorerName = value;
					this.SendPropertyChanged("ScorerName");
					this.OnScorerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goals", DbType="Int")]
		public System.Nullable<int> Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				if ((this._Goals != value))
				{
					this.OnGoalsChanging(value);
					this.SendPropertyChanging();
					this._Goals = value;
					this.SendPropertyChanged("Goals");
					this.OnGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this.OnAverageChanging(value);
					this.SendPropertyChanging();
					this._Average = value;
					this.SendPropertyChanged("Average");
					this.OnAverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_BEST_PLAYER", Storage="_LEAGUE", ThisKey="league_ID", OtherKey="League_Id", IsForeignKey=true)]
		public LEAGUE LEAGUE
		{
			get
			{
				return this._LEAGUE.Entity;
			}
			set
			{
				LEAGUE previousValue = this._LEAGUE.Entity;
				if (((previousValue != value) 
							|| (this._LEAGUE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LEAGUE.Entity = null;
						previousValue.BEST_PLAYERs.Remove(this);
					}
					this._LEAGUE.Entity = value;
					if ((value != null))
					{
						value.BEST_PLAYERs.Add(this);
						this._league_ID = value.League_Id;
					}
					else
					{
						this._league_ID = default(int);
					}
					this.SendPropertyChanged("LEAGUE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmpNo;
		
		private string _EmpName;
		
		private System.Nullable<int> _Salary;
		
		private string _DeptName;
		
		private string _Designation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpNoChanging(int value);
    partial void OnEmpNoChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnSalaryChanging(System.Nullable<int> value);
    partial void OnSalaryChanged();
    partial void OnDeptNameChanging(string value);
    partial void OnDeptNameChanged();
    partial void OnDesignationChanging(string value);
    partial void OnDesignationChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmpNo
		{
			get
			{
				return this._EmpNo;
			}
			set
			{
				if ((this._EmpNo != value))
				{
					this.OnEmpNoChanging(value);
					this.SendPropertyChanging();
					this._EmpNo = value;
					this.SendPropertyChanged("EmpNo");
					this.OnEmpNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="VarChar(100)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Int")]
		public System.Nullable<int> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptName", DbType="VarChar(50)")]
		public string DeptName
		{
			get
			{
				return this._DeptName;
			}
			set
			{
				if ((this._DeptName != value))
				{
					this.OnDeptNameChanging(value);
					this.SendPropertyChanging();
					this._DeptName = value;
					this.SendPropertyChanged("DeptName");
					this.OnDeptNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="VarChar(50)")]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this.OnDesignationChanging(value);
					this.SendPropertyChanging();
					this._Designation = value;
					this.SendPropertyChanged("Designation");
					this.OnDesignationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GAME")]
	public partial class GAME : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Game_Id;
		
		private string _Team1;
		
		private string _Team2;
		
		private System.Nullable<System.DateTime> _sDate;
		
		private string _Venue;
		
		private string _GameType;
		
		private System.Nullable<int> _League_Id;
		
		private EntitySet<GAME_IMAGE> _GAME_IMAGEs;
		
		private EntitySet<GAME_STAT> _GAME_STATs;
		
		private EntitySet<GAME_TICKET> _GAME_TICKETs;
		
		private EntityRef<LEAGUE> _LEAGUE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    partial void OnTeam1Changing(string value);
    partial void OnTeam1Changed();
    partial void OnTeam2Changing(string value);
    partial void OnTeam2Changed();
    partial void OnsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnsDateChanged();
    partial void OnVenueChanging(string value);
    partial void OnVenueChanged();
    partial void OnGameTypeChanging(string value);
    partial void OnGameTypeChanged();
    partial void OnLeague_IdChanging(System.Nullable<int> value);
    partial void OnLeague_IdChanged();
    #endregion
		
		public GAME()
		{
			this._GAME_IMAGEs = new EntitySet<GAME_IMAGE>(new Action<GAME_IMAGE>(this.attach_GAME_IMAGEs), new Action<GAME_IMAGE>(this.detach_GAME_IMAGEs));
			this._GAME_STATs = new EntitySet<GAME_STAT>(new Action<GAME_STAT>(this.attach_GAME_STATs), new Action<GAME_STAT>(this.detach_GAME_STATs));
			this._GAME_TICKETs = new EntitySet<GAME_TICKET>(new Action<GAME_TICKET>(this.attach_GAME_TICKETs), new Action<GAME_TICKET>(this.detach_GAME_TICKETs));
			this._LEAGUE = default(EntityRef<LEAGUE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1", DbType="VarChar(MAX)")]
		public string Team1
		{
			get
			{
				return this._Team1;
			}
			set
			{
				if ((this._Team1 != value))
				{
					this.OnTeam1Changing(value);
					this.SendPropertyChanging();
					this._Team1 = value;
					this.SendPropertyChanged("Team1");
					this.OnTeam1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2", DbType="VarChar(MAX)")]
		public string Team2
		{
			get
			{
				return this._Team2;
			}
			set
			{
				if ((this._Team2 != value))
				{
					this.OnTeam2Changing(value);
					this.SendPropertyChanging();
					this._Team2 = value;
					this.SendPropertyChanged("Team2");
					this.OnTeam2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> sDate
		{
			get
			{
				return this._sDate;
			}
			set
			{
				if ((this._sDate != value))
				{
					this.OnsDateChanging(value);
					this.SendPropertyChanging();
					this._sDate = value;
					this.SendPropertyChanged("sDate");
					this.OnsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Venue", DbType="VarChar(MAX)")]
		public string Venue
		{
			get
			{
				return this._Venue;
			}
			set
			{
				if ((this._Venue != value))
				{
					this.OnVenueChanging(value);
					this.SendPropertyChanging();
					this._Venue = value;
					this.SendPropertyChanged("Venue");
					this.OnVenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameType", DbType="VarChar(MAX)")]
		public string GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_League_Id", DbType="Int")]
		public System.Nullable<int> League_Id
		{
			get
			{
				return this._League_Id;
			}
			set
			{
				if ((this._League_Id != value))
				{
					if (this._LEAGUE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeague_IdChanging(value);
					this.SendPropertyChanging();
					this._League_Id = value;
					this.SendPropertyChanged("League_Id");
					this.OnLeague_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GAME_GAME_IMAGE", Storage="_GAME_IMAGEs", ThisKey="Game_Id", OtherKey="Game_Id")]
		public EntitySet<GAME_IMAGE> GAME_IMAGEs
		{
			get
			{
				return this._GAME_IMAGEs;
			}
			set
			{
				this._GAME_IMAGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GAME_GAME_STAT", Storage="_GAME_STATs", ThisKey="Game_Id", OtherKey="Game_Id")]
		public EntitySet<GAME_STAT> GAME_STATs
		{
			get
			{
				return this._GAME_STATs;
			}
			set
			{
				this._GAME_STATs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GAME_GAME_TICKET", Storage="_GAME_TICKETs", ThisKey="Game_Id", OtherKey="Game_Id")]
		public EntitySet<GAME_TICKET> GAME_TICKETs
		{
			get
			{
				return this._GAME_TICKETs;
			}
			set
			{
				this._GAME_TICKETs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_GAME", Storage="_LEAGUE", ThisKey="League_Id", OtherKey="League_Id", IsForeignKey=true)]
		public LEAGUE LEAGUE
		{
			get
			{
				return this._LEAGUE.Entity;
			}
			set
			{
				LEAGUE previousValue = this._LEAGUE.Entity;
				if (((previousValue != value) 
							|| (this._LEAGUE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LEAGUE.Entity = null;
						previousValue.GAMEs.Remove(this);
					}
					this._LEAGUE.Entity = value;
					if ((value != null))
					{
						value.GAMEs.Add(this);
						this._League_Id = value.League_Id;
					}
					else
					{
						this._League_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("LEAGUE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GAME_IMAGEs(GAME_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.GAME = this;
		}
		
		private void detach_GAME_IMAGEs(GAME_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.GAME = null;
		}
		
		private void attach_GAME_STATs(GAME_STAT entity)
		{
			this.SendPropertyChanging();
			entity.GAME = this;
		}
		
		private void detach_GAME_STATs(GAME_STAT entity)
		{
			this.SendPropertyChanging();
			entity.GAME = null;
		}
		
		private void attach_GAME_TICKETs(GAME_TICKET entity)
		{
			this.SendPropertyChanging();
			entity.GAME = this;
		}
		
		private void detach_GAME_TICKETs(GAME_TICKET entity)
		{
			this.SendPropertyChanging();
			entity.GAME = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GAME_IMAGE")]
	public partial class GAME_IMAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _image_Id;
		
		private System.Nullable<int> _Game_Id;
		
		private string _Location;
		
		private string _Name;
		
		private EntityRef<GAME> _GAME;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onimage_IdChanging(int value);
    partial void Onimage_IdChanged();
    partial void OnGame_IdChanging(System.Nullable<int> value);
    partial void OnGame_IdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public GAME_IMAGE()
		{
			this._GAME = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int image_Id
		{
			get
			{
				return this._image_Id;
			}
			set
			{
				if ((this._image_Id != value))
				{
					this.Onimage_IdChanging(value);
					this.SendPropertyChanging();
					this._image_Id = value;
					this.SendPropertyChanged("image_Id");
					this.Onimage_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", DbType="Int")]
		public System.Nullable<int> Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					if (this._GAME.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(MAX)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GAME_GAME_IMAGE", Storage="_GAME", ThisKey="Game_Id", OtherKey="Game_Id", IsForeignKey=true)]
		public GAME GAME
		{
			get
			{
				return this._GAME.Entity;
			}
			set
			{
				GAME previousValue = this._GAME.Entity;
				if (((previousValue != value) 
							|| (this._GAME.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME.Entity = null;
						previousValue.GAME_IMAGEs.Remove(this);
					}
					this._GAME.Entity = value;
					if ((value != null))
					{
						value.GAME_IMAGEs.Add(this);
						this._Game_Id = value.Game_Id;
					}
					else
					{
						this._Game_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("GAME");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GAME_STATS")]
	public partial class GAME_STAT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stats_Id;
		
		private string _BestPlayer;
		
		private System.Nullable<int> _Team1_Position;
		
		private System.Nullable<int> _Team2_Position;
		
		private System.Nullable<int> _Team1_Fouls;
		
		private System.Nullable<int> _Team2_Fouls;
		
		private System.Nullable<int> _Game_Id;
		
		private System.Nullable<int> _Team1_YellowCard;
		
		private System.Nullable<int> _Team2_YellowCard;
		
		private System.Nullable<int> _Team1_RedCard;
		
		private System.Nullable<int> _Team2_RedCard;
		
		private System.Nullable<int> _Team1_NumCornerKick;
		
		private System.Nullable<int> _Team2_NumCornerKick;
		
		private System.Nullable<int> _Team1_GoalScored;
		
		private System.Nullable<int> _Team2_GoalScored;
		
		private System.Nullable<decimal> _Team1_OveralAverage;
		
		private System.Nullable<decimal> _Team2_OveralAverage;
		
		private EntityRef<GAME> _GAME;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstats_IdChanging(int value);
    partial void Onstats_IdChanged();
    partial void OnBestPlayerChanging(string value);
    partial void OnBestPlayerChanged();
    partial void OnTeam1_PositionChanging(System.Nullable<int> value);
    partial void OnTeam1_PositionChanged();
    partial void OnTeam2_PositionChanging(System.Nullable<int> value);
    partial void OnTeam2_PositionChanged();
    partial void OnTeam1_FoulsChanging(System.Nullable<int> value);
    partial void OnTeam1_FoulsChanged();
    partial void OnTeam2_FoulsChanging(System.Nullable<int> value);
    partial void OnTeam2_FoulsChanged();
    partial void OnGame_IdChanging(System.Nullable<int> value);
    partial void OnGame_IdChanged();
    partial void OnTeam1_YellowCardChanging(System.Nullable<int> value);
    partial void OnTeam1_YellowCardChanged();
    partial void OnTeam2_YellowCardChanging(System.Nullable<int> value);
    partial void OnTeam2_YellowCardChanged();
    partial void OnTeam1_RedCardChanging(System.Nullable<int> value);
    partial void OnTeam1_RedCardChanged();
    partial void OnTeam2_RedCardChanging(System.Nullable<int> value);
    partial void OnTeam2_RedCardChanged();
    partial void OnTeam1_NumCornerKickChanging(System.Nullable<int> value);
    partial void OnTeam1_NumCornerKickChanged();
    partial void OnTeam2_NumCornerKickChanging(System.Nullable<int> value);
    partial void OnTeam2_NumCornerKickChanged();
    partial void OnTeam1_GoalScoredChanging(System.Nullable<int> value);
    partial void OnTeam1_GoalScoredChanged();
    partial void OnTeam2_GoalScoredChanging(System.Nullable<int> value);
    partial void OnTeam2_GoalScoredChanged();
    partial void OnTeam1_OveralAverageChanging(System.Nullable<decimal> value);
    partial void OnTeam1_OveralAverageChanged();
    partial void OnTeam2_OveralAverageChanging(System.Nullable<decimal> value);
    partial void OnTeam2_OveralAverageChanged();
    #endregion
		
		public GAME_STAT()
		{
			this._GAME = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stats_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stats_Id
		{
			get
			{
				return this._stats_Id;
			}
			set
			{
				if ((this._stats_Id != value))
				{
					this.Onstats_IdChanging(value);
					this.SendPropertyChanging();
					this._stats_Id = value;
					this.SendPropertyChanged("stats_Id");
					this.Onstats_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BestPlayer", DbType="VarChar(MAX)")]
		public string BestPlayer
		{
			get
			{
				return this._BestPlayer;
			}
			set
			{
				if ((this._BestPlayer != value))
				{
					this.OnBestPlayerChanging(value);
					this.SendPropertyChanging();
					this._BestPlayer = value;
					this.SendPropertyChanged("BestPlayer");
					this.OnBestPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1_Position", DbType="Int")]
		public System.Nullable<int> Team1_Position
		{
			get
			{
				return this._Team1_Position;
			}
			set
			{
				if ((this._Team1_Position != value))
				{
					this.OnTeam1_PositionChanging(value);
					this.SendPropertyChanging();
					this._Team1_Position = value;
					this.SendPropertyChanged("Team1_Position");
					this.OnTeam1_PositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2_Position", DbType="Int")]
		public System.Nullable<int> Team2_Position
		{
			get
			{
				return this._Team2_Position;
			}
			set
			{
				if ((this._Team2_Position != value))
				{
					this.OnTeam2_PositionChanging(value);
					this.SendPropertyChanging();
					this._Team2_Position = value;
					this.SendPropertyChanged("Team2_Position");
					this.OnTeam2_PositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1_Fouls", DbType="Int")]
		public System.Nullable<int> Team1_Fouls
		{
			get
			{
				return this._Team1_Fouls;
			}
			set
			{
				if ((this._Team1_Fouls != value))
				{
					this.OnTeam1_FoulsChanging(value);
					this.SendPropertyChanging();
					this._Team1_Fouls = value;
					this.SendPropertyChanged("Team1_Fouls");
					this.OnTeam1_FoulsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2_Fouls", DbType="Int")]
		public System.Nullable<int> Team2_Fouls
		{
			get
			{
				return this._Team2_Fouls;
			}
			set
			{
				if ((this._Team2_Fouls != value))
				{
					this.OnTeam2_FoulsChanging(value);
					this.SendPropertyChanging();
					this._Team2_Fouls = value;
					this.SendPropertyChanged("Team2_Fouls");
					this.OnTeam2_FoulsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", DbType="Int")]
		public System.Nullable<int> Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					if (this._GAME.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1_YellowCard", DbType="Int")]
		public System.Nullable<int> Team1_YellowCard
		{
			get
			{
				return this._Team1_YellowCard;
			}
			set
			{
				if ((this._Team1_YellowCard != value))
				{
					this.OnTeam1_YellowCardChanging(value);
					this.SendPropertyChanging();
					this._Team1_YellowCard = value;
					this.SendPropertyChanged("Team1_YellowCard");
					this.OnTeam1_YellowCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2_YellowCard", DbType="Int")]
		public System.Nullable<int> Team2_YellowCard
		{
			get
			{
				return this._Team2_YellowCard;
			}
			set
			{
				if ((this._Team2_YellowCard != value))
				{
					this.OnTeam2_YellowCardChanging(value);
					this.SendPropertyChanging();
					this._Team2_YellowCard = value;
					this.SendPropertyChanged("Team2_YellowCard");
					this.OnTeam2_YellowCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1_RedCard", DbType="Int")]
		public System.Nullable<int> Team1_RedCard
		{
			get
			{
				return this._Team1_RedCard;
			}
			set
			{
				if ((this._Team1_RedCard != value))
				{
					this.OnTeam1_RedCardChanging(value);
					this.SendPropertyChanging();
					this._Team1_RedCard = value;
					this.SendPropertyChanged("Team1_RedCard");
					this.OnTeam1_RedCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2_RedCard", DbType="Int")]
		public System.Nullable<int> Team2_RedCard
		{
			get
			{
				return this._Team2_RedCard;
			}
			set
			{
				if ((this._Team2_RedCard != value))
				{
					this.OnTeam2_RedCardChanging(value);
					this.SendPropertyChanging();
					this._Team2_RedCard = value;
					this.SendPropertyChanged("Team2_RedCard");
					this.OnTeam2_RedCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1_NumCornerKick", DbType="Int")]
		public System.Nullable<int> Team1_NumCornerKick
		{
			get
			{
				return this._Team1_NumCornerKick;
			}
			set
			{
				if ((this._Team1_NumCornerKick != value))
				{
					this.OnTeam1_NumCornerKickChanging(value);
					this.SendPropertyChanging();
					this._Team1_NumCornerKick = value;
					this.SendPropertyChanged("Team1_NumCornerKick");
					this.OnTeam1_NumCornerKickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2_NumCornerKick", DbType="Int")]
		public System.Nullable<int> Team2_NumCornerKick
		{
			get
			{
				return this._Team2_NumCornerKick;
			}
			set
			{
				if ((this._Team2_NumCornerKick != value))
				{
					this.OnTeam2_NumCornerKickChanging(value);
					this.SendPropertyChanging();
					this._Team2_NumCornerKick = value;
					this.SendPropertyChanged("Team2_NumCornerKick");
					this.OnTeam2_NumCornerKickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1_GoalScored", DbType="Int")]
		public System.Nullable<int> Team1_GoalScored
		{
			get
			{
				return this._Team1_GoalScored;
			}
			set
			{
				if ((this._Team1_GoalScored != value))
				{
					this.OnTeam1_GoalScoredChanging(value);
					this.SendPropertyChanging();
					this._Team1_GoalScored = value;
					this.SendPropertyChanged("Team1_GoalScored");
					this.OnTeam1_GoalScoredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2_GoalScored", DbType="Int")]
		public System.Nullable<int> Team2_GoalScored
		{
			get
			{
				return this._Team2_GoalScored;
			}
			set
			{
				if ((this._Team2_GoalScored != value))
				{
					this.OnTeam2_GoalScoredChanging(value);
					this.SendPropertyChanging();
					this._Team2_GoalScored = value;
					this.SendPropertyChanged("Team2_GoalScored");
					this.OnTeam2_GoalScoredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1_OveralAverage", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Team1_OveralAverage
		{
			get
			{
				return this._Team1_OveralAverage;
			}
			set
			{
				if ((this._Team1_OveralAverage != value))
				{
					this.OnTeam1_OveralAverageChanging(value);
					this.SendPropertyChanging();
					this._Team1_OveralAverage = value;
					this.SendPropertyChanged("Team1_OveralAverage");
					this.OnTeam1_OveralAverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2_OveralAverage", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Team2_OveralAverage
		{
			get
			{
				return this._Team2_OveralAverage;
			}
			set
			{
				if ((this._Team2_OveralAverage != value))
				{
					this.OnTeam2_OveralAverageChanging(value);
					this.SendPropertyChanging();
					this._Team2_OveralAverage = value;
					this.SendPropertyChanged("Team2_OveralAverage");
					this.OnTeam2_OveralAverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GAME_GAME_STAT", Storage="_GAME", ThisKey="Game_Id", OtherKey="Game_Id", IsForeignKey=true)]
		public GAME GAME
		{
			get
			{
				return this._GAME.Entity;
			}
			set
			{
				GAME previousValue = this._GAME.Entity;
				if (((previousValue != value) 
							|| (this._GAME.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME.Entity = null;
						previousValue.GAME_STATs.Remove(this);
					}
					this._GAME.Entity = value;
					if ((value != null))
					{
						value.GAME_STATs.Add(this);
						this._Game_Id = value.Game_Id;
					}
					else
					{
						this._Game_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("GAME");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GAME_TICKET")]
	public partial class GAME_TICKET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ticket_Id;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Game_Id;
		
		private EntityRef<GAME> _GAME;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicket_IdChanging(int value);
    partial void OnTicket_IdChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnGame_IdChanging(System.Nullable<int> value);
    partial void OnGame_IdChanged();
    #endregion
	public GAME_TICKET()
		{
			this._GAME = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticket_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Ticket_Id
		{
			get
			{
				return this._Ticket_Id;
			}
			set
			{
				if ((this._Ticket_Id != value))
				{
					this.OnTicket_IdChanging(value);
					this.SendPropertyChanging();
					this._Ticket_Id = value;
					this.SendPropertyChanged("Ticket_Id");
					this.OnTicket_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", DbType="Int")]
		public System.Nullable<int> Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					if (this._GAME.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GAME_GAME_TICKET", Storage="_GAME", ThisKey="Game_Id", OtherKey="Game_Id", IsForeignKey=true)]
		public GAME GAME
		{
			get
			{
				return this._GAME.Entity;
			}
			set
			{
				GAME previousValue = this._GAME.Entity;
				if (((previousValue != value) 
							|| (this._GAME.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME.Entity = null;
						previousValue.GAME_TICKETs.Remove(this);
					}
					this._GAME.Entity = value;
					if ((value != null))
					{
						value.GAME_TICKETs.Add(this);
						this._Game_Id = value.Game_Id;
					}
					else
					{
						this._Game_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("GAME");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LEAGUE")]
	public partial class LEAGUE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _League_Id;
		
		private string _Name;
		
		private string _Category;
		
		private System.Nullable<decimal> _WinningPrice;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _sDate;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private System.Nullable<int> _NumTeams;
		
		private System.Nullable<int> _UserId;
		
		private EntitySet<BEST_PLAYER> _BEST_PLAYERs;
		
		private EntitySet<GAME> _GAMEs;
		
		private EntitySet<LEAGUE_IMAGE> _LEAGUE_IMAGEs;
		
		private EntitySet<LOG> _LOGs;
		
		private EntitySet<SPORT_LEAGUE> _SPORT_LEAGUEs;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeague_IdChanging(int value);
    partial void OnLeague_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnWinningPriceChanging(System.Nullable<decimal> value);
    partial void OnWinningPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnsDateChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    partial void OnNumTeamsChanging(System.Nullable<int> value);
    partial void OnNumTeamsChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public LEAGUE()
		{
			this._BEST_PLAYERs = new EntitySet<BEST_PLAYER>(new Action<BEST_PLAYER>(this.attach_BEST_PLAYERs), new Action<BEST_PLAYER>(this.detach_BEST_PLAYERs));
			this._GAMEs = new EntitySet<GAME>(new Action<GAME>(this.attach_GAMEs), new Action<GAME>(this.detach_GAMEs));
			this._LEAGUE_IMAGEs = new EntitySet<LEAGUE_IMAGE>(new Action<LEAGUE_IMAGE>(this.attach_LEAGUE_IMAGEs), new Action<LEAGUE_IMAGE>(this.detach_LEAGUE_IMAGEs));
			this._LOGs = new EntitySet<LOG>(new Action<LOG>(this.attach_LOGs), new Action<LOG>(this.detach_LOGs));
			this._SPORT_LEAGUEs = new EntitySet<SPORT_LEAGUE>(new Action<SPORT_LEAGUE>(this.attach_SPORT_LEAGUEs), new Action<SPORT_LEAGUE>(this.detach_SPORT_LEAGUEs));
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_League_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int League_Id
		{
			get
			{
				return this._League_Id;
			}
			set
			{
				if ((this._League_Id != value))
				{
					this.OnLeague_IdChanging(value);
					this.SendPropertyChanging();
					this._League_Id = value;
					this.SendPropertyChanged("League_Id");
					this.OnLeague_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(MAX)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinningPrice", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> WinningPrice
		{
			get
			{
				return this._WinningPrice;
			}
			set
			{
				if ((this._WinningPrice != value))
				{
					this.OnWinningPriceChanging(value);
					this.SendPropertyChanging();
					this._WinningPrice = value;
					this.SendPropertyChanged("WinningPrice");
					this.OnWinningPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> sDate
		{
			get
			{
				return this._sDate;
			}
			set
			{
				if ((this._sDate != value))
				{
					this.OnsDateChanging(value);
					this.SendPropertyChanging();
					this._sDate = value;
					this.SendPropertyChanged("sDate");
					this.OnsDateChanged();
				}
			}
		}
			
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumTeams", DbType="Int")]
		public System.Nullable<int> NumTeams
		{
			get
			{
				return this._NumTeams;
			}
			set
			{
				if ((this._NumTeams != value))
				{
					this.OnNumTeamsChanging(value);
					this.SendPropertyChanging();
					this._NumTeams = value;
					this.SendPropertyChanged("NumTeams");
					this.OnNumTeamsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_BEST_PLAYER", Storage="_BEST_PLAYERs", ThisKey="League_Id", OtherKey="league_ID")]
		public EntitySet<BEST_PLAYER> BEST_PLAYERs
		{
			get
			{
				return this._BEST_PLAYERs;
			}
			set
			{
				this._BEST_PLAYERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_GAME", Storage="_GAMEs", ThisKey="League_Id", OtherKey="League_Id")]
		public EntitySet<GAME> GAMEs
		{
			get
			{
				return this._GAMEs;
			}
			set
			{
				this._GAMEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_LEAGUE_IMAGE", Storage="_LEAGUE_IMAGEs", ThisKey="League_Id", OtherKey="League_Id")]
		public EntitySet<LEAGUE_IMAGE> LEAGUE_IMAGEs
		{
			get
			{
				return this._LEAGUE_IMAGEs;
			}
			set
			{
				this._LEAGUE_IMAGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_LOG", Storage="_LOGs", ThisKey="League_Id", OtherKey="League_Id")]
		public EntitySet<LOG> LOGs
		{
			get
			{
				return this._LOGs;
			}
			set
			{
				this._LOGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_SPORT_LEAGUE", Storage="_SPORT_LEAGUEs", ThisKey="League_Id", OtherKey="League_Id")]
		public EntitySet<SPORT_LEAGUE> SPORT_LEAGUEs
		{
			get
			{
				return this._SPORT_LEAGUEs;
			}
			set
			{
				this._SPORT_LEAGUEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_LEAGUE", Storage="_USER", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.LEAGUEs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.LEAGUEs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BEST_PLAYERs(BEST_PLAYER entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = this;
		}
		
		private void detach_BEST_PLAYERs(BEST_PLAYER entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = null;
		}
		
		private void attach_GAMEs(GAME entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = this;
		}
		
		private void detach_GAMEs(GAME entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = null;
		}
		
		private void attach_LEAGUE_IMAGEs(LEAGUE_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = this;
		}
		
		private void detach_LEAGUE_IMAGEs(LEAGUE_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = null;
		}
		
		private void attach_LOGs(LOG entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = this;
		}
		
		private void detach_LOGs(LOG entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = null;
		}
		
		private void attach_SPORT_LEAGUEs(SPORT_LEAGUE entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = this;
		}
		
		private void detach_SPORT_LEAGUEs(SPORT_LEAGUE entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LEAGUE_IMAGE")]
	public partial class LEAGUE_IMAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Image_Id;
		
		private int _League_Id;
		
		private string _Location;
		
		private string _Name;
		
		private EntityRef<LEAGUE> _LEAGUE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImage_IdChanging(int value);
    partial void OnImage_IdChanged();
    partial void OnLeague_IdChanging(int value);
    partial void OnLeague_IdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LEAGUE_IMAGE()
		{
			this._LEAGUE = default(EntityRef<LEAGUE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Image_Id
		{
			get
			{
				return this._Image_Id;
			}
			set
			{
				if ((this._Image_Id != value))
				{
					this.OnImage_IdChanging(value);
					this.SendPropertyChanging();
					this._Image_Id = value;
					this.SendPropertyChanged("Image_Id");
					this.OnImage_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_League_Id", DbType="Int NOT NULL")]
		public int League_Id
		{
			get
			{
				return this._League_Id;
			}
			set
			{
				if ((this._League_Id != value))
				{
					if (this._LEAGUE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeague_IdChanging(value);
					this.SendPropertyChanging();
					this._League_Id = value;
					this.SendPropertyChanged("League_Id");
					this.OnLeague_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(MAX)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEAGUE_LEAGUE_IMAGE", Storage="_LEAGUE", ThisKey="League_Id", OtherKey="League_Id", IsForeignKey=true)]
		public LEAGUE LEAGUE
		{
			get
			{
				return this._LEAGUE.Entity;
			}
			set
			{
				LEAGUE previousValue = this._LEAGUE.Entity;
				if (((previousValue != value) 
							|| (this._LEAGUE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LEAGUE.Entity = null;
						previousValue.LEAGUE_IMAGEs.Remove(this);
					}
					this._LEAGUE.Entity = value;
					if ((value != null))
					{
						value.LEAGUE_IMAGEs.Add(this);
						this._League_Id = value.League_Id;
					}
					else
					{
						this._League_Id = default(int);
					}
					this.SendPropertyChanged("LEAGUE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
